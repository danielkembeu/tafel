// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  role      Role
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  student   Student[]
  teacher   Teacher[]
  comments  Comment[]
  room      Room?     @relation(fields: [roomId], references: [id])
  roomId    String?
  messages  Message[]
  admin     Admin[]
}

model Student {
  id      String  @id @default(cuid())
  email   String  @unique
  name    String
  age     Int
  subject Subject
  user    User?   @relation(fields: [userId], references: [id])
  userId  String?
}

model Teacher {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String
  subject   Subject
  courses   Course[]
  resources Resource[]
  user      User?      @relation(fields: [userId], references: [id])
  userId    String?
}

model Admin {
  id     String @id @default(cuid())
  email  String @unique
  name   String
  user   User?  @relation(fields: [userId], references: [id])
  userId String
}

model Course {
  id          String     @id @default(cuid())
  title       String
  description String
  resources   Resource[] // Un cours peut avoir plusieurs ressources
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  teacher     Teacher    @relation(fields: [teacherId], references: [id])
  teacherId   String
  comments    Comment[] // Les commentaires sur le cours
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String
  type        ResourceType // Type de ressource (PDF, Vid√©o, Image, etc.)
  fileUrl     String // Lien vers la ressource
  courseId    String
  course      Course       @relation(fields: [courseId], references: [id])
  createdAt   DateTime     @default(now())
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  teacherId   String
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
}

model Room {
  id              String   @id @default(cuid())
  name            String
  capacity        Int      @default(100)
  capacityReached Boolean  @default(false)
  users           User[]
  subject         Subject
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
}

enum Role {
  TEACHER
  STUDENT
  ADMIN
}

// Community
//  - filiere
//  - UE

// School
// - Datas of the school

enum ResourceType {
  PDF
  VIDEO
  IMAGE
  DOCUMENT
}

enum Subject {
  GENIE_LOGICIEL
  RESEAUX
  BASES_DE_DONNEES
  SYSTEMES_D_INFORMATION
  INTELLIGENCE_ARTIFICIELLE
  ALGORITHMES_ET_STRUCTURE_DE_DONNEES
  ENTREUPRENARIAT
}
